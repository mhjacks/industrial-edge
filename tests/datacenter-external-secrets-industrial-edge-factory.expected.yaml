---
# Source: external-secrets-install/templates/s3-secret.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: s3-secret
  namespace: external-secrets
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: s3-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        "application.properties": "{{ cat `s3.accessKey:` .awsAccessKeyId `\ns3.secretKey:` .awsSecretAccessKey }}"
        "s3Secret": "{{ cat `s3.accessKey:` .awsAccessKeyId `\ns3.secretKey:` .awsSecretAccessKey }}"
  data:
    - secretKey: "awsAccessKeyId"
      remoteRef:
        key: secret/data/hub/aws
        property: aws_access_key_id
    - secretKey: "awsSecretAccessKey"
      remoteRef:
        key: secret/data/hub/aws
        property: aws_secret_access_key
---
# Source: external-secrets-install/templates/s3-secret.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: s3-secret
  namespace: manuela-data-lake
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: s3-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        "application.properties": "{{ cat `s3.accessKey:` .awsAccessKeyId `\ns3.secretKey:` .awsSecretAccessKey }}"
        "s3Secret": "{{ cat `s3.accessKey:` .awsAccessKeyId `\ns3.secretKey:` .awsSecretAccessKey }}"
  data:
    - secretKey: "awsAccessKeyId"
      remoteRef:
        key: secret/data/hub/aws
        property: aws_access_key_id
    - secretKey: "awsSecretAccessKey"
      remoteRef:
        key: secret/data/hub/aws
        property: aws_secret_access_key
---
# Source: external-secrets-install/templates/s3-secret.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: s3-secret
  namespace: manuela-tst-all
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: s3-secret
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        "application.properties": "{{ cat `s3.accessKey:` .awsAccessKeyId `\ns3.secretKey:` .awsSecretAccessKey }}"
        "s3Secret": "{{ cat `s3.accessKey:` .awsAccessKeyId `\ns3.secretKey:` .awsSecretAccessKey }}"
  data:
    - secretKey: "awsAccessKeyId"
      remoteRef:
        key: secret/data/hub/aws
        property: aws_access_key_id
    - secretKey: "awsSecretAccessKey"
      remoteRef:
        key: secret/data/hub/aws
        property: aws_secret_access_key
---
# Source: external-secrets-install/templates/secret-git-repo-credentials.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: git-repo-credentials
  namespace: manuela-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: git-repo-credentials
    template:
      metadata:
        annotations:
          # Tekton magic, see https://tekton.dev/vault/pipelines-v0.15.2/auth/
          tekton.dev/git-0: https://github.com/mhjacks
      type: kubernetes.io/basic-auth
  dataFrom:
  - extract:
      key: secret/data/hub/git
---
# Source: external-secrets-install/templates/secret-image-registry-credentials.yaml
apiVersion: "external-secrets.io/v1beta1"
kind: ExternalSecret
metadata:
  name: image-registry-credentials
  namespace: manuela-ci
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: ClusterSecretStore
  target:
    name: image-registry-credentials
    template:
      metadata:
        annotations:
          # Tekton magic, see https://tekton.dev/vault/pipelines-v0.15.2/auth/
          tekton.dev/docker-0: https://quay.io
      type: kubernetes.io/basic-auth
  dataFrom:
  - extract:
      key: secret/data/hub/imageregistry
